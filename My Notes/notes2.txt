println internally calls a toString() method (method - function inside a class)
If we don't include a toString method then java calls a default to string method which can be seen as package.className.hashValue
eg. com.kunal.intro.A@4432

Packages:-

Packages are just containers or boxes for classes. It is used to keep the class names in compartments

A package is just a folder

We can put files with same class names under different packages, this will prevent us from getting any errors

Packages are stored in a hierarchial manner i.e. folder inside folder inside folder....

eg. package com.ksd.packages.b means file path of the package

file is inside these folders:

com -> ksd -> packages -> b 

com.ksd is the package naming convention of ksd.com (company reverse naming convention) 

When we use a public class in package A, we can import all the contents of it to package B via the 'import' statement.

If a class is private, we can't do it

If 2 files are in the same folder/package, no need to import them.

The properties that are not directly related to the object are called STATIC variables. They are not related but they are commmon to all the objects of the class.

let's take a constructor Human which has age, name, salary and married as its variables.

if we put in a static parameter population here then,

we access it using className(Human).population

we access the others using, this.variables,

if we use 'this' with static, we'll not get correct output

see 30.40 in OOPS 2 video(https://www.youtube.com/watch?v=_Ya6CN13t8k&list=PL9gnSGHSqcno1G3XjUbwzXHL8_EttOuKk&index=5) to understand the explaination better

Note - Whenever we are accessing, modifying or declaring static variable; use className and not objectName

When a member is declared static, it can be accessed before any of the objects of the class are created and without refering to that object like - kunal.name 

Even if no objects or constructor is created, we can still access the static variables

We can declare both methods (i.e. functions inside classes) and variables as static

eg. static void Hi() -> static method

static long age -> static variable

Why is main static in psvm method ?

A. Main is the first method that has to run in a Class hence if we want to create any other object inside a particular class make sure that main is run first and it should not be affected by anything else, for this, make main STATIC

Static belongs to the class and not to the object

IMP: Inside a static method, we can't use anything that is non-static

eg ->

Class {
    psvm {
        greeting()
        // non static data inside a static method i.e. this gives error
    }

    void greeting () {
        // non static data
    }
}

We know that something which is non-static belongs to an object

Non Static methods need an instance

Static methods don't need an instance

We can though have a static member inside a non static one 

eg. Class {
    psvm {
        
      
    }

    static void fun() {
        Main obj = new Main();
        obj.greeting();

        // here we are running a non static instance inside a static method but to run it, we are referencing it via its object which is 'obj' here.

        // Another way could have been to make the non static object static
        
        // 'Main' is the className here
    }

    void greeting () {
        // non static data
    }
}

Static methods can't refer to 'this' and 'super' keywords, in inheritance

'This' means refering to or dependent on an object, and static does not depend on objects 

// Initializing the variables using a static block
 
eg. class {
    static int a = 4;
    static int b;

IMP - Static Block will only run once when the first object is created i.e. when the class is loaded for the first time.

    static {
        // static block
        sout("I am in static block");
        b = a*5;
    }

    psvm {
        StaticBlock obj = new StaticBlock();

        sout(StaticBlock.a + " " + StaticBlock.b);

        StaticBlock.b += 3;

        sout(StaticBlock.a + " " + StaticBlock.b);

        StaticBlock obj2 = new StaticBlock();

         sout(StaticBlock.a + " " + StaticBlock.b);


    }

}

// Inner Classes - Class inside of Class

eg. 
public class InnerClasses {
    class Test {

        Note: Outer classes can not be static

        Note: Inner classes can be static as they are dependent on outer classes

        see Lec 2 1:00:40 for good explaination

    }
}

Static methods are not dependent on objects, hence they are resolved during compile time

Static methods are class level methods

Objects however are created during run time

<Complie Time is before run time>

// Singleton Class

When we want only one instance/object to be created in a class, use "Singleton Class"

Steps: 1. Don't allow anyone to call the constructor of this class, as constructor creates new objects

Solution - Use private keyword with constructor, this will allow it to work with that file only if we are using multiple files.

Private constructor can be called in the same file.

