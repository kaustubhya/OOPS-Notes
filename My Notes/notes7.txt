// Java Collections Framework

Collections - It is just a framework of files and other stuff that we can reuse.

Different Data Structures have some common methods (like .add(), .getFirst(), .sort() etc..). Thus the collection framework helps us in getting these methods of different Data Structures and allows us to reuse it instead of writing a code for it again and again.

There are 2 main interfaces - Collection and Map (see image).


// Vector

Like an arraylist but with a few differences,

• Vectors are synchronised.
In vectors, only one thread can access the object at a time. If another thread comes in, it'll have to wait till the current thread's job is done. 

• ArrayLists are not synchronised
In arraylist, multiple threads can access the same object at a time.

• ArrayLists are faster (reason - above point).

eg. List<Integer> vector = new Vector<>();

I recommend to use ArrayLists.


// Enums (Enumeration)

Enums are like a group of variables in java that are constant.

syntax:
 enum Week {
   Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday 

   // these are enum constants
   // every single one of them is public, static and final by default.
   // since it is final, we cannot create child enums 
   // type is Week

   Week() {
    // a constructor called, internally it is: public static final Week Monday = new Week();
    
    sout("constructor called for " + this);
   }

   // this constructor is not public or Protected, only private or default

   // why? Because we donot want to create new objects and it is not the concept of enums.

   // Constructor output will be:
   Constructor called for Monday
   Constructor called for Tuesday
   .
   .
   .
   Constructor called for Sunday
}

psvm {
    Week week;
    week = Week.Monday;

    for(Week day : Week.values()) {
        System.out.println(day);
        // output - Monday to Sunday

        System.out.println(week);
        // output - Monday 

        System.out.println(week.ordinal());
        // output - 0 (for Monday)
        // ordinal - position of the enum declaration        
    }
}

When we want a fixed group of objects, we use enums.

// Enums and Inheritance

• All the enums explicitly extend "java.lang.enum_class"

• We can't extend other classes in enums as multiple inheritance is not allowed in java 

• Enums can not be a superclass. 

• The "this" keyword in "Week" constructor above was overridden and it only printed out the enum constants' names.

• Enums can't extend multiple classes but it can implement the interfaces (as many as you want).

Use '==' operator to compare equality

sout(Week.valueOf("Monday")); // this returns the enum constant

Abstract methods are not allowed here.
A method body is needed. 

We can't create the objects explicitly in enums

It can have constructor and it is executed separately for every enum constant at the time when we load the enum class.

We cannot invoke this constructor explicitly.

If we try to access one enum constant, it fetches us all of the enum constants.

